// This file is released under the CC0 1.0 Universal

#include <avr/pgmspace.h>
#include <Adafruit_GFX.h>
#include "RGBmatrixPanel2.h"
RGBmatrixPanel2 matrix(A0, A1, A2, 30, A3, 31, true); // For Arduino Mega 2560

#include <Wii.h>
#include <usbhub.h>
#include <SPI.h>
USB Usb;
BTD Btd(&Usb);
WII Wii(&Btd, PAIR);

const uint8_t bitmapAfterYou[64] PROGMEM = {
  0b00100010, 0b00100100, 0b00000000, 0b00000000,
  0b11111001, 0b00111111, 0b10010111, 0b11000000,
  0b00100000, 0b01000100, 0b00010000, 0b00000000,
  0b00111110, 0b01111111, 0b11010000, 0b00000000,
  0b01100001, 0b00001010, 0b00010000, 0b00000000,
  0b10100001, 0b00001010, 0b00010100, 0b00000000,
  0b10101001, 0b00010010, 0b01010111, 0b11000000,
  0b01100110, 0b01100011, 0b11000000, 0b00000000,
  0b00000000, 0b00000000, 0b00000011, 0b11100001,
  0b00000001, 0b00010101, 0b11100000, 0b01010101,
  0b00000001, 0b00000000, 0b00000000, 0b10000001,
  0b00000001, 0b00110001, 0b11100111, 0b11111001,
  0b00000001, 0b11000010, 0b00010000, 0b10000001,
  0b00000010, 0b00000000, 0b00010001, 0b00000001,
  0b00000010, 0b00000000, 0b00100001, 0b00000000,
  0b00000001, 0b11110001, 0b11000000, 0b11100001,
};

const uint8_t bitmapThankYou[64] PROGMEM = {
  0b00010000, 0b00000000, 0b10101000, 0b00001000,
  0b11111110, 0b10001000, 0b10000010, 0b00000110,
  0b00100000, 0b10001011, 0b11010010, 0b00000000,
  0b00111100, 0b10101001, 0b00101010, 0b01001110,
  0b01101010, 0b11001001, 0b00100011, 0b10010001,
  0b10101010, 0b00001010, 0b00100100, 0b00000001,
  0b10010010, 0b00010010, 0b00100100, 0b00000010,
  0b01100100, 0b00100010, 0b11000011, 0b11001100,
  0b00000000, 0b00000000, 0b00000000, 0b00000000,
  0b00001010, 0b00101010, 0b00001111, 0b11011111,
  0b01110000, 0b01000010, 0b01000001, 0b00000010,
  0b00001001, 0b11111010, 0b00100111, 0b11001110,
  0b00000000, 0b00100010, 0b00100001, 0b00010010,
  0b01000000, 0b11110010, 0b00100111, 0b00001110,
  0b10000001, 0b00000010, 0b10001001, 0b10000010,
  0b01111100, 0b11100001, 0b00000110, 0b01011100,
};

void setup() {
  matrix.begin();
  Usb.Init();
}

void loop() {
  Usb.Task();
  if (Wii.wiimoteConnected) {
    if (Wii.getButtonClick(HOME)) {
      Wii.disconnect();
    } else {
      if (Wii.getButtonPress(LEFT)) {
        // After you
        matrix.fillScreen(0b0000000000000000);
        matrix.drawBitmap(0, 0, bitmapAfterYou, 32, 16, 0b0000011111100000);
        matrix.swapBuffers(true);
      } else if (Wii.getButtonPress(RIGHT)) {
        // Thank you
        matrix.fillScreen(0b0000000000000000);
        matrix.drawBitmap(0, 0, bitmapThankYou, 32, 16, 0b1111111111100000);
        matrix.swapBuffers(true);
      } else {
        matrix.fillScreen(0b0000000000000000);
        matrix.swapBuffers(true);
      }
    }
  }
}

